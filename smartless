#!/usr/bin/env bash

# smartless - a pager similar to less, but smarter
#
# works like the pager 'less', but does not enter the pager mode if the
# document is short
# inspired by code at http://unix.stackexchange.com/questions/107315/

# NOTE: why cant we use -F arg to less instead of smartless ?
# Add mouse scrolling support in less (does not work with older versions of "less")
# dont use -F without -X - and with -X there is no mouse support ...
# is this still the case with current version of less ?

# ------------------------------------------------------------------------------

# Copyright 2015 Stefan Heule
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ------------------------------------------------------------------------------

# Unit test ideas:
# * All TODO: ComponentTest notes
# * As git-pager with small and screenful of output
# * File with small and screenful of output, with and without \n at EOF

# '-H' (one of the few arguments that less does not accept) or
# --hold-pollute (coming from -H):
# Output to half the screen instead of filling it up
#
# Does not work with SMARTLESS_NUM_LINES set
if [[ "$*" =~ -[a-zA-Z]*H || "$*" =~ --hold-pollute && -z "${SMARTLESS_NUM_LINES}" ]] ; then
  SMARTLESS_HOLD_POLLUTE=2
else
  SMARTLESS_HOLD_POLLUTE=1
fi

if command -v batcat > /dev/null; then
  BATNAME="batcat"
else
  BATNAME="bat"
fi

# number of lines to directly display before entering the pager
if [ -z "${SMARTLESS_NUM_LINES}" ] ; then
  # default to 5 lines less than the screen height, if it can be discovered
  SMARTLESS_NUM_LINES="$(tput lines)"
  SMARTLESS_NUM_LINES="${SMARTLESS_NUM_LINES:+$(( (SMARTLESS_NUM_LINES - 5) / SMARTLESS_HOLD_POLLUTE ))}"
  # fall back to 15 lines
  SMARTLESS_NUM_LINES="${SMARTLESS_NUM_LINES:-15}"
fi

# the pager to be used
[ -z "$SMARTLESS_PAGER" ] && SMARTLESS_PAGER='less'

# the default arguments to the pager, note -c means clear screen and start at top
[ -z "$SMARTLESS_PAGER_ARGUMENTS" ] && SMARTLESS_PAGER_ARGUMENTS='-M -iR -K -x4 -c -~'

# if a file name is passed, read it
isfile=0
file=""
args=()
nextisarg=0
haspattern=0
wrap=1
for var ; do
  if (( nextisarg == 1 )); then
    nextisarg=0
    args+=("${var}")
    continue
  fi
  # ignore less arguments
  if [[ ! $var = -* ]] && [[ ! $var = +* ]]; then
    ((isfile++))
    file=$var
  else
    if [[ $var == "-p" ]] ||
       [[ $var == "--pattern" ]]; then
      haspattern=1
    fi
    if [[ $var == "-S" ]] ||
       [[ $var == "--chop-long-lines" ]]; then
      wrap=0
    fi
    if [[ $var == "-b" ]] ||
       [[ $var == "-h" ]] ||
       [[ $var == "-j" ]] ||
       [[ $var == "-k" ]] ||
       [[ $var == "-o" ]] ||
       [[ $var == "-O" ]] ||
       [[ $var == "-p" ]] ||
       [[ $var == "-P" ]] ||
       [[ $var == "-t" ]] ||
       [[ $var == "-T" ]] ||
       [[ $var == "-x" ]] ||
       [[ $var == "-y" ]] ||
       [[ $var == "-z" ]] ||
       [[ $var == "-#" ]]; then
      nextisarg=1
    fi
    args=("$var")
  fi
done

# if more than one file provided on cmdline, revert to original less ...
if (( isfile > 1 )); then
    exec "${SMARTLESS_PAGER}" "${SMARTLESS_PAGER_ARGUMENTS}" $@
elif (( haspattern == 1 )); then
    exec "${SMARTLESS_PAGER}" "${SMARTLESS_PAGER_ARGUMENTS}" $@
fi

# if stdout is not a terminal its probably been redirected, so skip pager ...
if [ ! -t 1 ] ; then
    if (( isfile == 1 )); then
        exec cat $file
    else
        exec cat
    fi
fi

if (( isfile == 1 )); then
  # if LESSOPEN is defined then try to use it ...
  if [[ -n "$LESSOPEN" ]]; then
    lpcmd=$(echo $LESSOPEN | sed 's/ %s//' | sed 's/|-/|/' | sed 's/||/|/' | awk -F\| '{print $2}')
    export FROM_ISFILE=1
    ${lpcmd} ${file} | "${BASH_SOURCE[0]}" "${args[@]}"
    exit $?
  else
    "${BASH_SOURCE[0]}" "${args[@]}" < "${file}"
    exit $?
  fi
fi

# Cleanup -H or --hold-pollute
if [ "${SMARTLESS_HOLD_POLLUTE}" -ne 2 ] ; then
  ARGS=("${@}")
else
  ARGS=()
  for arg ; do
    arg=${arg//H/}
    arg=${arg//--hold-pollute/}
    [ -z "${arg//-/}" ] && continue
    ARGS+=("${arg}")
  done
fi

# number of lines to show before switching to less
nlines=$SMARTLESS_NUM_LINES

n=0
lines=
newline=$'\n'

cols="$(tput cols)"
mchars=$((nlines * cols))
nchars=0
atlimit=0

# read and display enough lines to fill most of the terminal (nlines many lines)
while [ $n -lt "${nlines}" ] && IFS= read -r line; do
    # replace tabs with spaces ...
    #line2=${line//	/    }
    line2=$(echo "${line}" | t2s)
    lchars=$(echo ${line2} | wc -m)
    lines="${lines}${line2}${newline}"
    line=''
    n=$((n + 1))
    nchars=$((nchars + lchars))
    if [[ $wrap -gt 0 && $nchars -ge $mchars ]]; then
        atlimit=1
        break
    fi
done

if [[ -n "$FROM_GIT_LESS" ]]; then
    export FROM_ISFILE=1
fi

#echo "nlines = $nlines"
#echo "nchars = $nchars"
#echo "mchars = $mchars"
#echo "atlimit = $atlimit"
#echo "ARGS = ${ARGS[@]}"
#echo "FROM_ISFILE = ${FROM_ISFILE}"

# For input with no trailing `\nEOF`
# TODO: ComponentTest: `printf '1' | smartless`
if [ -n "${line}" ]; then
  lines="${lines}${line}"
fi

trap "if [[ $wrap -eq 0 ]] ; then printf '\033[?7h' ; fi" EXIT

# if the input is longer, run the pager
if IFS= read -r line || [[ $atlimit -gt 0 ]]; then
# {
#   printf '%s' "${lines}"
#   dont echo extra info ...
#   printf '\033[38;5;2m... (more shown in %s)\033[0m\n' "${SMARTLESS_PAGER}"
# } >&2
  {
  if [[ $wrap -eq 0 ]]; then
      printf '\033[?7l'
  fi
  if [[ -n "$FROM_ISFILE" ]]; then
    { printf '%s%s\n' "${lines}" "${line}" ; exec cat; } | "${SMARTLESS_PAGER}" -L "${SMARTLESS_PAGER_ARGUMENTS}" "${ARGS[@]}"
  else
    { printf '%s%s\n' "${lines}" "${line}" | $BATNAME -pp ; exec $BATNAME -pp; } | "${SMARTLESS_PAGER}" "${SMARTLESS_PAGER_ARGUMENTS}" "${ARGS[@]}"
  fi
  if [[ $wrap -eq 0 ]]; then
      printf '\033[?7h'
  fi
  }
else
  # TODO: ComponentTest: `printf '1\n2\n3' | smartless`
  {
  if [[ $wrap -eq 0 ]]; then
      printf '\033[?7l'
  fi
  if [[ -n "$FROM_ISFILE" ]]; then
    printf '%s' "${lines}"
  else
    printf '%s' "${lines}" | $BATNAME -pp
  fi
  if [[ $wrap -eq 0 ]]; then
      printf '\033[?7h'
  fi
  }
fi
